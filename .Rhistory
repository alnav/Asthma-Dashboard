install.packages("shiny")
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
# Assuming a pre-trained logistic regression model is loaded
# For the purpose of this example, let's create a dummy model
dummy_model <- glm(formula = asthma ~ age + smoking + family_history,
data = data.frame(
asthma = sample(c(0, 1), 100, replace = TRUE),
age = rnorm(100, mean = 30, sd = 10),
smoking = sample(c(0, 1), 100, replace = TRUE),
family_history = sample(c(0, 1), 100, replace = TRUE)
),
family = binomial)
# Define UI
ui <- fluidPage(
titlePanel("Asthma Risk Prediction"),
sidebarLayout(
sidebarPanel(
numericInput("age", "Age:", value = 30, min = 0, max = 100),
selectInput("smoking", "Smoking Status:", choices = list("Non-smoker" = 0, "Smoker" = 1)),
selectInput("family_history", "Family History of Asthma:", choices = list("No" = 0, "Yes" = 1)),
actionButton("predict", "Predict")
),
mainPanel(
h3("Predicted Probability of Asthma"),
verbatimTextOutput("result")
)
)
)
# Define Server
server <- function(input, output) {
# Reactive event for prediction
observeEvent(input$predict, {
# Collect the input data
new_data <- data.frame(
age = input$age,
smoking = as.numeric(input$smoking),
family_history = as.numeric(input$family_history)
)
# Predict using the model
probability <- predict(dummy_model, newdata = new_data, type = "response")
# Display the result
output$result <- renderText({
paste("The probability of having asthma is:", round(probability, 2))
})
})
}
# Run the app
shinyApp(ui = ui, server = server)
mutate(start_age = floor(runif(n,18,80)),
sex = ifelse(runif(n,0,1)<=0.45,"Male","Female"),
data<-as.data.frame(cbind(ppid=floor(runif(n,1,2500)))) %>%
mutate(date = as.Date(floor(runif(n,0,365*8)),origin="2015-01-1")) %>%
distinct()
library(shiny); runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
library(shiny); runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
library(shiny); runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
install.packages("rmarkdown")
library(shiny); runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
runApp('MEGA/Dissertation/asthma-dashboard/Asthma-Dashboard/dashboard.R')
